#!/bin/bash
#WARNING: has a npm dependency
#TODO: make flags
#TODO: produce a timestamp log for all git file after pull
#using code form https://gist.github.com/jasonrudolph/1810768
#for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t$branch; done | sort -r

# global variables
student_names=()
student_git_links=()
default_link=""

#Parse JSON into arrays
#learned jq with the help https://starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/
parse_names_and_links(){
  file="$1"
  if [[ "$file" == "" ]]; then
    echo "parse_names_and_links must take a json file as input" >&2
    exit 1
  fi
  # get names
  for row in $(jq -r '.students[].name | @base64' $file); do
    name=$(echo ${row} | base64 -d -i | sed -e 's/ /_/g' | sed -e 's/\(.*\)/\L\1/')
    # echo $name
    student_names+=($name)
  done
  # get student_git_links
  default_link=$(jq -r '.instructor.gitlink' $file)
  for row in $(jq -r '.students[].gitlink | @base64' $file); do
    tmp=$default_link
    link=$(echo ${row} | base64 -d -i)
    # echo $link
    new_link=$(sed 's/SleepyInstructor/'$link'/g' <<< $tmp)
    # echo $new_link
    student_git_links+=($new_link)
  done
  # echo -e "${student_names[@]}"
  # echo -e "${student_git_links[@]}"
}

#Clone appropriately
clone_all(){
  # echo "${student_git_links[@]}"
  for ((i=0;i<${#student_git_links[@]};++i)); do
    link="${student_git_links[i]}"
    dir=${student_names[i]}
    if [ ! -d "$dir" ]; then
      mkdir $dir
      cd $dir
      git clone $link
      cd ..
      echo "done cloning $link"
    else
      echo "$dir already exist..skipping..."
    fi
  done
}

# update appropriately
update_all(){
  regularPath=$(echo $default_link | sed -e 's/.*\/\(.*\)\.git/\1/')
  echo $regularPath
  # echo "${student_git_links[@]}"
  for ((i=0;i<${#student_names[@]};++i)); do
    dir=${student_names[i]}
    if [ ! -d "$dir" ]; then
      mkdir $dir
    fi
    if ! cd "$dir/$regularPath"; then
      echo -e ""$dir/$regularPath" does not exist\n"
      continue
    fi
    # discard all local changes, if any
    git reset --hard
    git pull
    cd ../..
    echo -e "done updating $dir\n"
  done
}

#very specific
copy_individual_html(){
  src="$3Langara-CPSC1045-006-Assignments/Assignment$1/dist"
  dst="robin_yuan/Langara-CPSC1045-006-Assignments/Assignment$1/dist"
  f="$2"
  if [ -e $dst/$f ]; then
    echo "file exists $f, removing it"
    rm $dst/$f
  fi
  ls $src
  cp $src/$f $dst/$f
}

copy_individual_js(){
  src="$3Langara-CPSC1045-006-Assignments/Assignment$1/src"
  dst="robin_yuan/Langara-CPSC1045-006-Assignments/Assignment$1/src"
  f="$2"
  if [ -e $dst/$f ]; then
    echo "file exists $f, removing it"
    rm $dst/$f
  fi
  ls $src
  cp $src/$f $dst/$f
}

#TODO: file path is very restricted right now, specific to one file structure, and cannot be many, only can be 1 file at a time
validate(){
  folder="$1"
  assignment="$2"
  f="$3"
  outFile="results/assignment$assignment/${folder::-1}.txt"

  # make folder structures and output text files
  if [[ ! -d "results/assignment$assignment" ]]; then
    mkdir -p results/assignment$assignment
  fi
  if [[ ! -f $outFile ]]; then
    touch $outFile
    echo "created new file $outFile"
  fi
  if [[ "$f" == *.js ]]; then
    echo "$f ends with .js"
    fpath=$(find $folder/*/Assignment$assignment/src  -name $f)
    echo "file is: $fpath"
    npm run jshint "$fpath" >> $outFile 2>&1
  elif [[ "$f" == *.html ]]; then
    echo "$f ends with .html"
    fpath=$(find $folder/*/Assignment$assignment/dist  -name $f)
    echo "file is: $fpath"
    npm run vnu "$fpath" >> $outFile 2>&1
  else
    echo "$f has unsupported extension, cannot validate"
  fi
}

print_usage(){
  echo -e "usage: $0\n [-l src] [-u src] [-c assignment# file_name student_folder] [-v folder_name assignment# file_names...]
    \n\t-l: clone all as listed in src(.json)
    \n\t-u: update all as listed in src(.json)
    \n\t-c: copy individual assignment to default server
    \n\t-v: validate folder and as many file as you want inside this folder  "
}

if [[ "$#" -lt 1 ]]; then
  echo "please try '$0 --help' for details"
  exit 1
else
  opt="$1"
  shift;
  case "$opt" in
    "-l")
      parse_names_and_links $1
      clone_all
      ;;
    "-u")
      parse_names_and_links $1
      update_all
      ;;
    "-c")
      copy_individual_html $1 $2 $4
      copy_individual_js $1 $3 $4
      ;;
    "-v")
      folder="$1"
      assignment="$2"
      shift
      shift
      f="$1"
      while [[ ! -z "$f" ]]; do
        validate "$folder" "$assignment" "$f"
        shift
        f="$1"
      done
      # open up the output file or udpate it
      start chrome "results/assignment$assignment/${folder::-1}.txt"

      # always clean cache because of bunch of errors for syntax problems
      npm cache clean --force
      ;;
    "--help")
      print_usage
      ;;
    *)
      echo "ERROR: Invalid option: \""$opt"\"" >&2
      exit 1
      ;;
  esac
fi

# clone all
# parse_names_and_links $1
# clone_all

# update all
# parse_names_and_links $1
# update_all

# copy specific one to another one because the othe one is running server
# copy_individual $1 $2 $3
