#!/bin/bash

#TODO: make flags
#TODO: produce a timestamp log for all git file after pull
#using code form https://gist.github.com/jasonrudolph/1810768
#for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t$branch; done | sort -r

# global variables
student_names=()
student_git_links=()
default_link=""

#Parse JSON into arrays
#learned jq with the help https://starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/
parse_names_and_links(){
  file="$1"
  if [[ "$file" == "" ]]; then
    echo "parse_names_and_links must take a json file as input" >&2
    exit 1
  fi
  # get names
  for row in $(jq -r '.students[].name | @base64' $file); do
    name=$(echo ${row} | base64 -d -i | sed -e 's/ /_/g' | sed -e 's/\(.*\)/\L\1/')
    # echo $name
    student_names+=($name)
  done
  # get student_git_links
  default_link=$(jq -r '.instructor.gitlink' $file)
  for row in $(jq -r '.students[].gitlink | @base64' $file); do
    tmp=$default_link
    link=$(echo ${row} | base64 -d -i)
    # echo $link
    new_link=$(sed 's/SleepyInstructor/'$link'/g' <<< $tmp)
    # echo $new_link
    student_git_links+=($new_link)
  done
  # echo -e "${student_names[@]}"
  # echo -e "${student_git_links[@]}"
}

#Clone appropriately
clone_all(){
  # echo "${student_git_links[@]}"
  for ((i=0;i<${#student_git_links[@]};++i)); do
    link="${student_git_links[i]}"
    dir=${student_names[i]}
    if [ ! -d "$dir" ]; then
      mkdir $dir
      cd $dir
      git clone $link
      cd ..
      echo "done cloning $link"
    else
      echo "$dir already exist..skipping..."
    fi
  done
}

# update appropriately
update_all(){
  regularPath=$(echo $default_link | sed -e 's/.*\/\(.*\)\.git/\1/')
  echo $regularPath
  # echo "${student_git_links[@]}"
  for ((i=0;i<${#student_names[@]};++i)); do
    dir=${student_names[i]}
    if [ ! -d "$dir" ]; then
      mkdir $dir
    fi
    if ! cd "$dir/$regularPath"; then
      echo -e ""$dir/$regularPath" does not exist\n"
      continue
    fi
    # discard all local changes, if any
    git reset --hard
    git pull
    cd ../..
    echo -e "done updating $dir\n"
  done
}

#very specific
copy_individual(){
  src="$3Langara-CPSC1045-006-Assignments/Assignment$1/dist"
  dst="robin_yuan/Langara-CPSC1045-006-Assignments/Assignment$1/dist"
  ls $src
  f="$2"
  cp $src/$f $dst/$f
}


# clone all
# parse_names_and_links $1
# clone_all

# update all
# parse_names_and_links $1
# update_all

# copy specific one to another one because the othe one is running server
copy_individual $1 $2 $3
